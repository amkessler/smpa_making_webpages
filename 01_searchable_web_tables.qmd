---
title: "Making a searchable database table"
author: "Aaron Kessler"
format:
  html:
    self-contained: true
    theme: cosmo
    toc: true
    toc-title: "On this page"
    toc-depth: 2
    code-copy: true
    smooth-scroll: true
    page-layout: article
    css: styles.css
execute:
  warning: false
  message: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(DT)

#### PRESIDENTIAL CANDIDATE TRIPS ####
   
# Load in data of prez candidate campaign trips between midterms and end of Jan
events <- readRDS("events_saved.rds")

options(knitr.kable.NA = "")

table_class <- "display nowrap stripe compact"
dt_base_options <- list(
  pageLength = 15,
  language = list(search = "Quick find:"),
  scrollX = TRUE
)
dt_button_config <- list(
  "copy",
  list(extend = "csv", filename = "campaign_events"),
  list(extend = "excel", filename = "campaign_events")
)
candidate_palette <- c(Biden = "#DCE4F7", Warren = "#DCE4F7", Trump = "#F9E0E0")
accent_color <- "#6C4EE3"


```

::: {.lead}
Explore how to transform campaign event data into an elegant, searchable web experience powered by `DT`.
:::

## Using DT to make a searchable table

::: callout-note
## What makes a webpage?
[An oldie but a goodie from 2009](https://www.youtube.com/watch?v=7_LPdttKXPc) reminds us the web is simply a network of connected computers.
Ultimately, a website is just a collection of files that live on someone else's server.
:::

Let's start with the most basic searchable table so you can see how little code it takes to publish something useful on the web.


```{r}
#We can use the "DT" package to easily make a sortable, filterable, searchable data table
#Just this little bit of code does a whole lot - check it out:

DT::datatable(
  events,
  class = table_class,
  options = modifyList(dt_base_options, list(dom = "frtip"))
)

```


```{r}
#We can already sort, but what if we want to allow the table to be FILTERED too?
#It's easy, we just add:
DT::datatable(
  events, 
  rownames = FALSE, 
  filter = "top",
  class = table_class,
  options = modifyList(dt_base_options, list(dom = "frtip"))
)
```


```{r}
#Now hmm, what's up with the filters on the text columns? Why aren't they working?
#It's because of a quirk in DT tables where filters will only work on text that is converted to a factor
#So let's do that
events <- events %>% 
  mutate(
    state = as_factor(state),
    event_type = as_factor(event_type)
  )
```


```{r}
#Now let's try the DT table code again and see if it worked
DT::datatable(
  events, 
  rownames = FALSE, 
  filter = "top",
  class = table_class,
  options = modifyList(dt_base_options, list(dom = "frtip"))
)
```


```{r}
#Now, for the coup de grÃ¢ce
#let's add some buttons at the top of the page to let people copy, download, etc
#we do that using a DT "extension" called, you guessed it, Buttons
# https://rstudio.github.io/DT/extensions.html

DT::datatable(
  events, 
  rownames = FALSE, 
  filter = "top", 
  extensions = 'Buttons', 
  class = table_class,
  options = modifyList(dt_base_options, list(dom = 'Bfrtip', buttons = dt_button_config))
) %>%
  DT::formatStyle('cand_lastname', color = accent_color, fontWeight = 'bold')
```


```{r}
## saving the result

# first we just need to assign our table to a variable...

mytable <- DT::datatable(
  events, 
  rownames = FALSE, 
  filter = "top", 
  extensions = 'Buttons', 
  class = table_class,
  options = modifyList(dt_base_options, list(dom = 'Bfrtip', buttons = dt_button_config))
) %>%
  DT::formatStyle('cand_lastname', color = accent_color, fontWeight = 'bold') 

# ... then just run this simple bit of code to export to html
htmlwidgets::saveWidget(mytable, "candidatetracker.html")


# We've now created a working web page that can be put anywhere on the internet we choose
# Yay!

# If we stay within the world of quarto though we don't need to export it, we can just display it
# within the quarto page of course
```


### Creating a Minimal Table

::: {.columns}
::: {.column width="55%"}
What if we have a small snippet of data and want a super minimal presentation with all of the chrome removed?
This layout focuses the reader on the content itself without search boxes or pagination controls.
:::
::: {.column width="45%"}
```{r}

events %>% 
  head(5) %>% 
  DT::datatable(
    rownames = FALSE, 
    class = table_class,
    options = modifyList(dt_base_options, list(
      searching = FALSE,
      paging = FALSE,
      dom = "t",
      pageLength = 5,
      scrollX = FALSE
    ))
  ) 


```
:::
:::

## Advanced DT Formatting and Conditional Styling

Sometimes you want to highlight specific data points or format columns differently to make your table more readable and visually appealing.

```{r}
# Create a table with conditional formatting based on data values
# This example highlights different candidate parties with colors
# and formats the date column for better readability

DT::datatable(
  events, 
  rownames = FALSE, 
  filter = "top",
  extensions = 'Buttons', 
  class = table_class,
  options = modifyList(dt_base_options, list(dom = 'Bfrtip', buttons = dt_button_config))
) %>%
  # Format the date column to be more readable
  DT::formatDate('date', method = 'toLocaleDateString') %>%
  # Highlight candidates with party styling and adjust typography
  DT::formatStyle(
    'cand_lastname',
    backgroundColor = DT::styleEqual(names(candidate_palette), unname(candidate_palette)),
    fontWeight = 'bold',
    color = accent_color
  ) %>%
  DT::formatStyle('date', color = '#4A4A4A') %>%
  # Make the event type column bold and change text color
  DT::formatStyle('event_type', fontWeight = 'bold', color = '#2E7D32')

```

## Customizing Search and Display Options

For more advanced users, you can customize how the search functionality works and control the table's appearance more precisely.

```{r}
# Create a more customized table with specific search options
# and enhanced user experience features

DT::datatable(
  events, 
  rownames = FALSE, 
  filter = list(position = 'top', clear = FALSE),
  extensions = c('Buttons', 'ColReorder'), 
  class = table_class,
  options = modifyList(dt_base_options, list(
    dom = 'Blfrtip',  # B=buttons, l=length menu, f=filtering, r=processing, t=table, i=info, p=pagination
    buttons = append(dt_button_config, list('colvis')),
    pageLength = 10,
    lengthMenu = list(c(5, 10, 25, 50, -1), c('5', '10', '25', '50', 'All')),
    colReorder = TRUE,  # Allow column reordering
    search = list(regex = TRUE, caseInsensitive = TRUE),
    columnDefs = list(
      list(targets = '_all', className = 'dt-body-middle'),  # Align content nicely
      list(targets = 0, visible = FALSE),  # Hide first column if needed
      list(targets = c(1, 2), searchable = TRUE)
    )
  ))
) %>%
  # Add custom styling for better readability
  DT::formatStyle(columns = c('cand_lastname'), 
                  fontSize = '14px', 
                  fontWeight = 'bold',
                  color = accent_color) %>%
  DT::formatStyle(columns = c('state'), 
                  backgroundColor = '#F5F2FF',
                  border = '1px solid #E0DAFF')

```
